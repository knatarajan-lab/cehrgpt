from abc import ABC, abstractmethod
from typing import Optional

from cehrgpt.generation.cehrgpt_patient.cehrgpt_patient_schema import CehrGptPatient


class RewardFunction(ABC):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    @abstractmethod
    def get_reward(
        self, query: str, cehrgpt_patient: Optional[CehrGptPatient], **kargs
    ) -> float:
        """
        :param query: the query that represents a clinical statement to the encoder.

        :param cehrgpt_patient: the patient sequence generated by the decoder
        :param kargs:
        :return:
        """
        raise NotImplementedError("Must be implemented in subclass")
